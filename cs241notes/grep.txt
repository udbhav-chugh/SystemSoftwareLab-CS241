grep:

-E : (exactly similar to egrep)
you want to search using a fancy expression. For example parenthesis () can be used to indicate groups with | used as an OR operator. You could run this search using -E:

grep -E '^no(fork|group)' /etc/group
...to return lines that start with either "nofork" or "nogroup". Without the -E switch you would have to escape the special characters involved because with normal pattern matching they would just search for that exact pattern;

-F
grep -f user.txt /etc/group
grep -F -f user.txt /etc/group
user.txt:
cse
^CS210
in first all lines with cse or all lines with CS210 start will be printed
in second case only with cse and starting with "^cs210" will be printd

-c : This prints only a count of the lines that match a pattern
-h : Display the matched lines, but do not display the filenames.
-i : Ignores, case for matching
-l : Displays list of a filenames only.
-n : Display the matched lines and their line numbers.
-v : This prints out all the lines that do not matches the pattern
-e exp : Specifies expression with this option. Can use multiple times.
-f file : Takes patterns from file, one per line.
-E : Treats pattern as an extended regular expression (ERE)
-w : Match whole word
-o : Print only the matched parts of a matching line,
 with each such part on a separate output line.

-r recursiv search from current dir or from specified dir 
grep -r "include" cs210

. (dot) - a single character.
? - the preceding character matches 0 or 1 times only.
* - the preceding character matches 0 or more times.
+ - the preceding character matches 1 or more times.
{n} - the preceding character matches exactly n times.
{n,m} - the preceding character matches at least n times and not more than m times.
[agd] - the character is one of those included within the square brackets.
[^agd] - the character is not one of those included within the square brackets.
[c-f] - the dash within the square brackets operates as a range. In this case it means either the letters c, d, e or f.
() - allows us to group several characters to behave as one.
| (pipe symbol) - the logical OR operation.
^ - matches the beginning of the line.
$ - matches the end of the line.




ls -l ->extended data of files
ls -a->hidden files'
ls -lh->size of files in human readable form

ls -l --block-size=MB ->give size in MB of all files

rev->reverse each word of argument
sort -r print entire file bottom up

grep    // print lines matching a pattern

--help  // Output a usage message and exit.

--version or -V     // Output the version number of grep and exit.

-L      // Suppress normal output; instead print the name of each input file
            from  which  no output would normally have been printed.

-l      // Suppress  normal output; instead print the name of each input file
            from which output would normally have been printed.

-m NUM      // Stop reading a file after NUM matching lines

-o      // Print  only the matched (non-empty) parts of a matching line, with
            each such part on a separate output line.

-q      // Quiet; do not write anything to standard output.

-s      // Suppress error messages about nonexistent or unreadable files.

-H      // Print the file name for each match. This is the default when there
            is more than one file to search.

-h       // Suppress the prefixing of file names on output. This is the default
            when  there  is only one file (or only standard input) to search.

-n       // Prefix each line of output with the 1-based line number within its
            input file.

-r       // Read  all  files under each directory, recursively, following
            symbolic links only if they are on the command line.

-R       // Read all files under each directory, recursively.  Follow all
            symbolic links, unlike -r.
-c      //linecount where particular thing is found

-i ignore case distinction

grep -oh "[aeious] filename | wc -l

grep -vf file1 file2 // file2-file1 content
