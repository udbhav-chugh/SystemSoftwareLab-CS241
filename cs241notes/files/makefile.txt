all: main.c
$ make       // Creates a makefile which has main.c as its dependency

all: main.c
    gcc main.c -o main
$ make       // Creates a makefile which has main.c as its dependency
                and compiles main.c into executable named main

clean:
    rm main
$ make clean                // Deletes the executable file named main

all: object1.o object2.o object3.o    // Will compile executable only
    gcc object1.o object2.o object3.o    if all required object files
                                         are present

all: cube.o rectangle.o cylinder.o circle.o
    gcc -o shapes cube.o rectangle.o cylinder.o circle.o
                    // Compiles the object files into an executable
                       named shapes

cube.o: main1.c main2.c main3.c
    gcc -c main1.c main2.c main3.c  // Dependency rules to combine .c
                                    files into each object file

$@ => Name of the file to be made (current target)
$? => Name of the changed dependencies (changed more recently than
      current target)
$< => Name of the related file that caused action (current
      dependency)
$* => Prefix shared by target and dependent files (current
      dependency without extension)

% => Specifies all files one by one

HEADER=header.h     // Declare macro which contains value header.h

$(HEADER)   // Returns value contained by the macro HEADER

@echo HEADER $(HEADER)  // Executes echo command on shell and displays output:
                           HEADER header.h

@echo "\033[31m"HEADER $(HEADER)"\033[0m"   // Display text in different colors
                                               30-37 for foreground colors
                                               40-47 for background colors

LIBCC=ar rc
libA.a: cube.o rectangle.o
    $(LIBCC) $@ $^          // Creates library file libA.a

make -f combine.mk      // Specifies makefile as combine.mk

CC=g++
LIBCC=ar rc
HEADERPATH=./test/macro/lib2/
HEADER=connect.h
CFLAGS=-I$(HEADERPATH)          // -I is used to specify path to search for files during
                                    compilation
MAIN=main.cpp
ODIR=obj
_OBJ= cube.o square.o cone.o sphere.o
OBJ=$(patsubst %,$(ODIR)/%,$(_OBJ))     // Substitutes the pattern
                                            Puts $(ODIR)/$(_OBJ) wherever $(_OBJ) appears

all: $(MAIN) $(OBJ)

$(ODIR)/%.o: %.cpp $(HEADERPATH)$(HEADER)
	$(CC) -c -o $@ $< $(CFLAGS)

clean:
	rm $(ODIR)/*.o



all: $(MAIN) lib1.a lib2.a
    $(CC) $^ -o $@ $(CFLAGS)

lib1.a: $(OBJ1)
    $(LIBCC) $@ $^

lib2.a: $(OBJ2)
    $(LIBCC) $@ $^

$(ODIR)/%.o: %.cpp $(HEADERPATH)$(HEADER)
    $(CC) -c $< -o $@ $(CFLAGS)

target:                                 // for loop in makefile
    @for x in 1 2 3 4 5 ; do \
    echo $$x ; \
    done

echo:
    @echo HEADER $(HEADER)
    @echo vakul gupta
    @echo "\033[32mvakul gupta"
    @echo "bjwejwbewje"

clean:                                  // if else in makefile
ifeq ($(CC),g+++)
    rm $(ODIR)/*.o all *.a
else ifneq ($(CC),g++)
    @echo "LOL"
else
    @echo "LOL2"
endif


new:
	i=20; while [ "$$i" -le 50 ]; do \
	echo "Computing $$i"; i=$$((i + 10));\
	done
